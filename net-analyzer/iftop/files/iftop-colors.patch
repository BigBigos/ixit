diff -Naur a/ui.c b/ui.c
--- a/ui.c	2011-10-03 22:30:03.000000000 +0200
+++ b/ui.c	2013-11-01 20:35:28.357485858 +0100
@@ -91,6 +91,10 @@
 char helpmsg[HELP_MSG_SIZE];
 int dontshowdisplay = 0;
 
+#define COLOR_PAIR_SENT 1
+#define COLOR_PAIR_RECV 2
+#define COLOR_PAIR_BOTH 3
+
 /*
  * Compare two screen lines based on bandwidth.  Start comparing from the 
  * specified column
@@ -346,12 +350,13 @@
     }
 }
 
-void draw_bar(float n, int y) {
+void draw_bar(float n, int y, short colorpair) {
     int L;
+    colorpair = has_colors()==TRUE?colorpair:0; /* set 0 if terminal is not color capable*/
     mvchgat(y, 0, -1, A_NORMAL, 0, NULL);
     L = get_bar_length(8 * n);
     if (L > 0)
-        mvchgat(y, 0, L + 1, A_REVERSE, 0, NULL);
+        mvchgat(y, 0, L + 1, A_REVERSE, colorpair, NULL);
 }
 
 void draw_line_totals(int y, host_pair_line* line, option_linedisplay_t linedisplay) {
@@ -366,17 +371,17 @@
     if(options.showbars) {
       switch(linedisplay) {
         case OPTION_LINEDISPLAY_TWO_LINE:
-          draw_bar(line->sent[options.bar_interval],y);
-          draw_bar(line->recv[options.bar_interval],y+1);
+          draw_bar(line->sent[options.bar_interval],y,  COLOR_PAIR_SENT);
+          draw_bar(line->recv[options.bar_interval],y+1,COLOR_PAIR_RECV);
           break;
         case OPTION_LINEDISPLAY_ONE_LINE_SENT:
-          draw_bar(line->sent[options.bar_interval],y);
+          draw_bar(line->sent[options.bar_interval],y,COLOR_PAIR_SENT);
           break;
         case OPTION_LINEDISPLAY_ONE_LINE_RECV:
-          draw_bar(line->recv[options.bar_interval],y);
+          draw_bar(line->recv[options.bar_interval],y,COLOR_PAIR_RECV);
           break;
         case OPTION_LINEDISPLAY_ONE_LINE_BOTH:
-          draw_bar(line->recv[options.bar_interval] + line->sent[options.bar_interval],y);
+          draw_bar(line->recv[options.bar_interval] + line->sent[options.bar_interval],y,COLOR_PAIR_BOTH);
           break;
       }
     }
@@ -787,6 +792,15 @@
 
 void ui_curses_init() {
     (void) initscr();      /* initialize the curses library */
+    if( has_colors()==TRUE)
+    {
+        start_color();          /* Start color          */
+        use_default_colors();   /* retain terminal fg , bg colors */
+        init_pair(COLOR_PAIR_RECV, COLOR_GREEN,  -1);  /* Download color */
+        init_pair(COLOR_PAIR_SENT, COLOR_BLUE,   -1);
+        init_pair(COLOR_PAIR_BOTH, COLOR_MAGENTA,-1);
+    }
+
     keypad(stdscr, TRUE);  /* enable keyboard mapping */
     (void) nonl();         /* tell curses not to do NL->CR/NL on output */
     (void) cbreak();       /* take input chars one at a time, no wait for \n */
